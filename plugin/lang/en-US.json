{
	"languageTag": "en-US",
	"fileDescription": "Extend your game with local multiplayer fun",
	"text": {
		"plugins": {
			"airconsole": {
				"name": "AirConsole",
				"description": "Extend your game with local multiplayer fun",
				"help-url": "https://github.com/Psychokiller1888/c3airconsole",
				"properties": {
					"max-players": {
						"name": "Max players",
						"desc": "Set the maximum players allowed to connect before triggering the 'on too many players' trigger"
					},
					"is-controller": {
						"name": "Is controller",
						"desc": "Check this if this project is intended to be a controller"
					},
					"controller-only": {
						"name": "Controller only",
						"desc": "These properties only take effect if 'Is controller' is checked"
					},
					"orientation": {
						"name": "Orientation",
						"desc": "CONTROLLER ONLY - Sets this controller in either PORTRAIT or LANDSCAPE mode",
						"items": {
							"landscape": "Landscape",
							"portrait": "Portrait"
						}
					},
					"synchronize-time": {
						"name": "Synchronize time",
						"desc": "CONTROLLER ONLY - Enable time synchronization with server. This is needed for 'getServerTime()'"
					},
					"device-motion": {
						"name": "Device motion",
						"desc": "CONTROLLER ONLY - If set > 0, onDeviceMotion gets called every 'Device motion' milliseconds with the data from the accelerometer and gyroscope"
					}
				},
				"aceCategories": {
					"signalling": "Signalling",
					"messaging": "Messaging",
					"device-and-user": "Device and user",
					"ads": "Ads",
					"persistent-data": "Persistent data",
					"highscores": "Highscores",
					"plugin": "Plugin",
					"game": "Game",
					"system": "System",
					"browser": "Browser",
					"ids": "Ids",
					"data": "Data",
					"profile": "Profile",
					"controller-only": "Controller only",
					"preset-message": "Preset message"
				},
				"conditions": {
					"on-connect": {
						"list-name": "On connect",
						"display-text": "On new connection",
						"description": "Triggered when a device connects to the game."
					},
					"on-disconnect": {
						"list-name": "On disconnect",
						"display-text": "On disconnection",
						"description": "Triggered when a device disconnects from the game."
					},
					"on-device-disconnect": {
						"list-name": "On device disconnect",
						"display-text": "On device id {0} disconnects",
						"description": "Triggered when a device disconnects from the game.",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "Device id to track"
							}
						}
					},
					"on-too-many-players": {
						"list-name": "On too many players",
						"display-text": "On too many players",
						"description": "Triggered when a device connects but the max player limit property is reached or exceeded."
					},
					"on-premium-connect": {
						"list-name": "On premium connect",
						"display-text": "On premium connect",
						"description": "Triggered when a device becomes premium or when a premium device connects."
					},
					"on-message": {
						"list-name": "On message",
						"display-text": "On message from any device",
						"description": "Triggered when receiving a message from any device."
					},
					"on-message-from": {
						"list-name": "On message from",
						"display-text": "On message from device id {0}",
						"description": "Triggered when receiving a message from a specific device.",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id the message should be from"
							}
						}
					},
					"on-message-is": {
						"list-name": "On message is",
						"display-text": "On message property {0} is {1}",
						"description": "Triggered when receiving a message with a specific content.",
						"params": {
							"property-name": {
								"name": "Property name",
								"desc": "The message property to compare to"
							},
							"property-value": {
								"name": "Property value",
								"desc": "The message content awaited"
							}
						}
					},
					"on-message-from-is": {
						"list-name": "On message from is",
						"display-text": "On message property {0} is {1} and from device id {2}",
						"description": "Triggered when receiving a message with a specific content from a specific device.",
						"params": {
							"property-name": {
								"name": "Property name",
								"desc": "The message property to compare to"
							},
							"property-value": {
								"name": "Property value",
								"desc": "The message content awaited"
							},
							"device-id": {
								"name": "Device id",
								"desc": "The device id the message should be from"
							}
						}
					},
					"on-message-has-property": {
						"list-name": "On message has property",
						"display-text": "On message has property {0}",
						"description": "Triggered when a message from any device has a specific property.",
						"params": {
							"property-name": {
								"name": "Property name",
								"desc": "The property name to check the existence of"
							}
						}
					},
					"is-multipart-message": {
						"list-name": "Is multipart message",
						"display-text": "Is multipart message",
						"description": "True if the last received message has more than one property set, false otherwise."
					},
					"is-device-user-connected": {
						"list-name": "Is user logged in",
						"display-text": "Is device id {0} user logged in",
						"description": "True if the device's user is logged in, false otherwise.",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to check if connected"
							}
						}
					},
					"on-ad-complete": {
						"list-name": "On ad complete",
						"display-text": "On advertisement complete",
						"description": "Triggered when an advertisement is finished or no advertisement was shown."
					},
					"on-ad-show": {
						"list-name": "On ad show",
						"display-text": "On advertisement showing",
						"description": "Triggered when an advertisement is shown."
					},
					"on-persistent-data-loaded": {
						"list-name": "On persistent data loaded",
						"display-text": "On persistent data loaded",
						"description": "Triggered when persistent data was loaded from RequestPersistentData."
					},
					"on-persistent-data-stored": {
						"list-name": "On persistent data stored",
						"display-text": "On persistent data stored",
						"description": "Triggered when persistent data was stored from StorePersistentData."
					},
					"on-receiving-highscores": {
						"list-name": "On receiving highscores",
						"display-text": "On receiving highscores",
						"description": "Triggered when highscores received."
					},
					"on-highscores-stored": {
						"list-name": "On highscores stored",
						"display-text": "On highscores stored",
						"description": "Triggered when highscores storing is done."
					},
					"on-device-profile-change": {
						"list-name": "On device profile change",
						"display-text": "On device profile change",
						"description": "Triggered when a device updates it's profile pic, nickname or email."
					},
					"on-custom-device-state-change": {
						"list-name": "On custom device state change",
						"display-text": "On custom device state change",
						"description": "Triggered when a device updates it's custom device state."
					},
					"is-premium": {
						"list-name": "Is premium",
						"display-text": "Is device id {0} premium",
						"description": "True if the device's user is premium, false otherwise.",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to check if premium"
							}
						}
					},
					"is-plugin-offline": {
						"list-name": "Is plugin offline",
						"display-text": "Is plugin offline",
						"description": "True if the plugin loaded as offline, false otherwise."
					},
					"is-controller": {
						"list-name": "Is controller",
						"display-text": "Is controller",
						"description": "True if this project is set as a controller."
					},
					"is-ad-showing": {
						"list-name": "Is ad showing",
						"display-text": "Is ad showing",
						"description": "True if an ad is currently showing."
					},
					"ad-shown": {
						"list-name": "Ad shown",
						"display-text": "Ad shown",
						"description": "True if an ad was shown."
					},
					"on-device-motion": {
						"list-name": "On device motion",
						"display-text": "On device motion",
						"description": "Triggered every X millisecond if the plugin property has the 'Device motion' property set higher than 0. This only works for controllers."
					}
				},
				"actions": {
					"game-ready": {
						"list-name": "Game ready",
						"display-text": "Set the game as ready",
						"description": "Sets the game as ready. This will trigger OnConnect for all already connected devices."
					},
					"message": {
						"list-name": "Message",
						"display-text": "Send [i]{1}: {2}[/i] to device id {0}",
						"description": "Sends a message to a specific device.",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to send the message to"
							},
							"property-name": {
								"name": "Message property name",
								"desc": "Message property name (can only be 'message' for now)"
							},
							"message": {
								"name": "Message",
								"desc": "Message to send"
							}
						}
					},
					"broadcast": {
						"list-name": "Broadcast",
						"display-text": "Send [i]{0}: {1}[/i] to all connected devices",
						"description": "Sends a message to all connected devices",
						"params": {
							"property-name": {
								"name": "Message property name",
								"desc": "Message property name (can only be 'message' for now)"
							},
							"message": {
								"name": "Message",
								"desc": "Message to send"
							}
						}
					},
					"set-custom-device-state-property": {
						"list-name": "Set custom device state property",
						"display-text": "Set custom state property [i]{0}[/i] to [i]{1}[/i]",
						"description": "Sets a device custom state property.",
						"params": {
							"property": {
								"name": "Property",
								"desc": "Device state property to set"
							},
							"value": {
								"name": "Value",
								"desc": "Device state value"
							}
						}
					},
					"request-highscores": {
						"list-name": "Request HighScores",
						"display-text": "Request HighScores for [i]{0} v. {1}[/i] Uids: {2} Ranks: {3} Total: {4} Top: {5}",
						"description": "Requests highscores. OnHighScores triggered when the highscores are returned.",
						"params": {
							"level-name": {
								"name": "Level name",
								"desc": "The name of the level"
							},
							"level-version": {
								"name": "Level version",
								"desc": "The version of the level"
							},
							"uids": {
								"name": "Uids",
								"desc": "A comma separated list of users UIDs that should be included in the result. Use 'all' for all connected controllers"
							},
							"ranks": {
								"name": "Ranks",
								"desc": "A comma separated list of high score rank types. High score rank types can include data from across the world, only a specific area or a users friends. Valid array entries are 'world', 'country', 'region', 'city', 'friends'. Use comma to separate the types if you need more than one"
							},
							"total": {
								"name": "Total",
								"desc": "Amount of high scores to return per rank type"
							},
							"top": {
								"name": "Top",
								"desc": "Amount of top high scores to return per rank type. top is part of total"
							}
						}
					},
					"store-highscores": {
						"list-name": "Store HighScores",
						"display-text": "Store HighScores for [i]{0} v. {1}[/i] Score: {2} Uid: {3} Data: {4} Score string: {5}",
						"description": "Stores highscores. OnHighScoreStored triggered when the request is completed.",
						"params": {
							"level-name": {
								"name": "Level name",
								"desc": "The name of the level the user was playing. This should be a human readable string because it appears in the high score sharing image. You can also just pass an empty string"
							},
							"level-version": {
								"name": "Level version",
								"desc": "The version of the level the user was playing. This is for your internal use"
							},
							"score": {
								"name": "Score",
								"desc": "The score the user has achieved"
							},
							"uid": {
								"name": "Uid",
								"desc": "The UIDs of the users that achieved the high score. Can be a single uid or an array of uids. Default is the uid of this device. Use comma to separate multiple UIDS"
							},
							"data": {
								"name": "Data",
								"desc": "Custom high score data (e.g. can be used to implement Ghost modes or include data to verify that it is not a fake high score)"
							},
							"score-string": {
								"name": "Score string",
								"desc": "A short human readable representation of the score. (e.g. '4 points in 3s'). Defaults to 'X points' where x is the score converted to an integer"
							}
						}
					},
					"set-active-players": {
						"list-name": "Set active players",
						"display-text": "Set active players, max players: {0}",
						"description": "Takes all currently connected controllers and assigns them a player number. Can only be called by the screen. The assigned player numbers always start with 0 and are consecutive. You can hardcode player numbers, but not device_ids. Once the screen has called setActivePlayers you can get the device_id of the first player by calling convertPlayerNumberToDeviceId(0), the device_id of the second player by using ConvertPlayerNumberToDeviceId(1). You can also convert device_ids to player numbers by using ConvertDeviceIdToPlayerNumber(device_id). You can get all device_ids that are active players by using GetActivePlayerDeviceIds().",
						"params": {
							"max-players": {
								"name": "Maximum players",
								"desc": "The maximum number of controllers that should get a player number assigned"
							}
						}
					},
					"show-ad": {
						"list-name": "Show ad",
						"display-text": "Show ad on controllers and screen",
						"description": "Show ad on every connected controller and screen. onAdComplete is called when showing ad is over."
					},
					"navigate-home": {
						"list-name": "Navigate home",
						"display-text": "Navigate home",
						"description": "Request that all devices return to the AirConsole store."
					},
					"navigate-to": {
						"list-name": "Navigate to",
						"display-text": "Navigate to {0}",
						"description": "Request that all devices load a game by url.",
						"params": {
							"url": {
								"name": "Url",
								"desc": "The base url of the game to navigate to (excluding screen.html or controller.html)"
							}
						}
					},
					"request-persistent-data": {
						"list-name": "Request persistent data",
						"display-text": "Request persistent data for ids {0}.",
						"description": "Requests persistent data from the servers. Calls 'On persistent data loaded' when done.",
						"params": {
							"uids": {
								"name": "Uids",
								"desc": "A comma separated list of the uids for which you would like to request the persistent data"
							}
						}
					},
					"store-persistent-data": {
						"list-name": "Store persistent data",
						"display-text": "Store persistent data {0} = {1} for uid {2}",
						"description": "Stores a property-value pair persistently on the AirConsole servers. Storage is per game. Total storage can not exceed 1 MB per game and uid. Storage is public, not secure and anyone can request and tamper with it. Do not store sensitive data.",
						"params": {
							"property": {
								"name": "Property",
								"desc": "Persistent data property name"
							},
							"value": {
								"name": "Value",
								"desc": "Persistent data property value"
							},
							"uid": {
								"name": "Uid",
								"desc": "The uid for which the data should be stored"
							}
						}
					},
					"edit-profile": {
						"list-name": "Edit profile",
						"display-text": "Edit profile",
						"description": "Lets the user change his nickname, profile picture and email address. If you need a real nickname of the user, use this function. onDeviceProfileChange will be called if the user logs in. Controller only"
					},
					"set-orientation": {
						"list-name": "Set orientation",
						"display-text": "Set orientation to {0}",
						"description": "Sets the device's orientation. Controller only",
						"params": {
							"orientation": {
								"name": "Orientation",
								"desc": "Desired orientation",
								"items": {
									"landscape": "Landscape",
									"portrait": "Portrait"
								}
							}
						}
					},
					"send-preset-message": {
						"list-name": "Send preset message",
						"display-text": "Send preset message to device id {0}.",
						"description": "Sends a previously set message to a specific device.",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to send the preset message to"
							}
						}
					},
					"broadcast-preset-message": {
						"list-name": "Broadcast preset message",
						"display-text": "Broadcast preset message",
						"description": "Sends the preset message to all connected devices."
					},
					"set-message-property": {
						"list-name": "Set message property",
						"display-text": "Set [i]{0}[/i] property to [i]{1}[/i]",
						"description": "Sets a property of the preset message to the given value.",
						"params": {
							"property": {
								"name": "Property",
								"desc": "Preset message property name"
							},
							"value": {
								"name": "Value",
								"desc": "Preset message property value"
							}
						}
					},
					"clear-preset-message": {
						"list-name": "Broadcast preset message",
						"display-text": "Clear preset message",
						"description": "Clear the preset message."
					},
					"get-premium": {
						"list-name": "Get premium",
						"display-text": "Get premium",
						"description": "(Controller only) Offers the user to become a premium member. Can only be called from controllers. If you call getPremium in development mode, the device becomes premium immediately."
					},
					"vibrate": {
						"list-name": "Vibrate",
						"display-text": "Vibrate for {0}ms.",
						"description": "(Controller only) Vibrate the controller for {0} millisecond.",
						"params": {
							"time": {
								"name": "Time",
								"desc": "Duration, in milliseconds, of the vibration."
							}
						}
					}
				},
				"expressions": {
					"device-id": {
						"description": "Returns the device id that last triggered an AirConsole condition.",
						"translated-name": "DeviceId"
					},
					"message": {
						"description": "Returns the last message received.",
						"translated-name": "Message"
					},
					"message-at-property": {
						"description": "Returns the last message received with a specific property name.",
						"translated-name": "MessageAtProperty",
						"params": {
							"property-name": {
								"name": "Property name",
								"desc": "Property name"
							}
						}
					},
					"is-multipart-message": {
						"description": "Returns 1 if the last message has more than 1 property, else 0.",
						"translated-name": "IsMultipartMessage"
					},
					"message-has-property": {
						"description": "Returns 1 if the last message has the specified property set, else 0.",
						"translated-name": "MessageHasProperty",
						"params": {
							"property-name": {
								"name": "Property name",
								"desc": "Property name"
							}
						}
					},
					"message-as-json": {
						"description": "Returns a JSON string representation of the last message received.",
						"translated-name": "MessageAsJSON"
					},
					"get-profile-picture": {
						"description": "Returns the profile picture url of the specified device id.",
						"translated-name": "GetProfilePicture",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to get the profile picture from"
							},
							"size": {
								"name": "Picture size",
								"desc": "The size in pixels of the picture. Default is 64"
							}
						}
					},
					"get-nickname": {
						"description": "Returns the nickname of the specified device id.",
						"translated-name": "GetNickname",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to get the nickname from"
							}
						}
					},
					"get-uid": {
						"description": "Returns UID of the specified device id.",
						"translated-name": "GetUID",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to get the uid from"
							}
						}
					},
					"get-message-properties-count": {
						"description": "Returns how many properties the last received message contains.",
						"translated-name": "GetMessagePropertiesCount"
					},
					"get-master-controller-device-id": {
						"description": "Returns the device id of the master controller.",
						"translated-name": "GetMasterControllerDeviceID"
					},
					"convert-player-number-to-device-id": {
						"description": "Converts the specified player number into its attributed device id.",
						"translated-name": "ConvertPlayerNumberToDeviceId",
						"params": {
							"player-number": {
								"name": "Player number",
								"desc": "The player number to convert to device id"
							}
						}
					},
					"convert-device-id-to-player-number": {
						"description": "Converts the specified device id into its attributed player number.",
						"translated-name": "ConvertDeviceIdToPlayerNumber",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to convert to player number"
							}
						}
					},
					"get-controller-device-ids": {
						"description": "Returns a JSON converted C3Array of all the device ids that have loaded your game.",
						"translated-name": "GetControllerDeviceIDs"
					},
					"is-premium": {
						"description": "Returns 1 if the specified device id is premium, else 0.",
						"translated-name": "IsPremium",
						"params": {
							"device-id": {
								"name": "Device id",
								"desc": "The device id to check if premium"
							}
						}
					},
					"get-active-player-device-ids": {
						"description": "Returns a JSON converted C3Array of device_ids of the active players previously set by the screen by calling setActivePlayers. The first device_id in the array is the first player, the second device_id in the array is the second player etc.",
						"translated-name": "GetActivePlayerDeviceIds"
					},
					"get-persistent-data": {
						"description": "Returns a JSON converted C3Dictionary of the last loaded persistent data.",
						"translated-name": "GetPersistentData"
					},
					"get-highscores": {
						"description": "Returns a JSON converted C3Dictionary of the last loaded highscores.",
						"translated-name": "GetHighscores"
					},
					"is-plugin-offline": {
						"description": "Returns 1 if the plugin loaded as offline, else 0.",
						"translated-name": "IsPluginOffline"
					},
					"is-controller": {
						"description": "Returns 1 if the plugin is set as a controller, else 0.",
						"translated-name": "IsController"
					},
					"is-ad-showing": {
						"description": "Returns 1 if ads are currently showing, else 0.",
						"translated-name": "IsAdShowing"
					},
					"ad-shown": {
						"description": "Returns 1 if ads were shown, else 0.",
						"translated-name": "AdShown"
					},
					"get-server-time": {
						"description": "Returns the current time of the game server. This allows you to have a synchronized clock: You can send the server time in a message to know exactly at what point something happened on a device. To use this action you need to check 'Synchronize time' plugin parameters. Only usable by controller.",
						"translated-name": "GetServerTime"
					}
				}
			}
		}
	}
}